<?php


namespace HamidMp\OTPManager;


use Closure;
use Illuminate\Auth\RequestGuard;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\ServiceProvider;

class OTPManagerServiceProvider extends ServiceProvider
{

    public function boot()
    {

        $this->loadMigrationsFrom(__DIR__.'/../database/migrations');

        $this->loadTranslationsFrom(__DIR__.'/../resources/lang', 'otpmanager');

        $this->publishes(

            [
                //config
                __DIR__.'/../config/otpmanager.php'=>config_path('otpmanager.php'),

                // Translations
                //__DIR__.'/../resources/lang' => resource_path('lang/vendor/otpmanager'),
                __DIR__.'/../resources/lang' => resource_path('lang'),

                // middleware
                __DIR__.'/../Http/Middleware' => app_path('/Http/Middleware'),

                // migrations
                //__DIR__.'/../database/migrations' => database_path('migrations/2021_03_28_000000_create_otp_table.php'),


            ]
            ,'otpmanager'
        );

        $this->configureGuard();

    }

    public function register()
    {
        config([
            'auth.guards.otpmanager' => array_merge([
                'driver' => 'otpmanager',
                'provider' => null,
            ], config('auth.guards.otpmanager', [])),
        ]);

        if (! $this->app->configurationIsCached()) {
            $this->mergeConfigFrom(__DIR__.'/../config/otpmanager.php', 'otpmanager');
        }

        parent::register(); // TODO: Change the autogenerated stub
    }


    /**
     * Configure the Sanctum authentication guard.
     *
     * @return void
     */
    protected function configureGuard()
    {
        Auth::resolved(function ($auth) {
            $auth->extend('otpmanager', function ($app, $name, array $config) use ($auth) {
                return tap($this->createGuard($auth, $config), function ($guard) {
                    app()->refresh('request', $guard, 'setRequest');
                });
            });
        });
    }

    /**
     * Register the guard.
     *
     * @param \Illuminate\Contracts\Auth\Factory  $auth
     * @param array $config
     * @return RequestGuard
     */
    protected function createGuard($auth, $config)
    {
        return new RequestGuard(
            new Guard($auth, config('otpmanager.verification_lifetime'), $config['provider']),
            $this->app['request'],
            $auth->createUserProvider($config['provider'] ?? null)
        );
    }

}
